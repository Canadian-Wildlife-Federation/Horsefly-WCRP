Traceback (most recent call last):
  File "C:\Users\TMillaKoch\Anaconda3\envs\test\lib\site-packages\jupyter_cache\executors\utils.py", line 56, in single_nb_execution
    record_timing=False,
  File "C:\Users\TMillaKoch\Anaconda3\envs\test\lib\site-packages\nbclient\client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\Users\TMillaKoch\Anaconda3\envs\test\lib\site-packages\nbclient\util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "C:\Users\TMillaKoch\Anaconda3\envs\test\lib\site-packages\nbclient\util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "C:\Users\TMillaKoch\Anaconda3\envs\test\lib\asyncio\base_events.py", line 568, in run_until_complete
    return future.result()
  File "C:\Users\TMillaKoch\Anaconda3\envs\test\lib\site-packages\nbclient\client.py", line 664, in async_execute
    cell, index, execution_count=self.code_cells_executed + 1
  File "C:\Users\TMillaKoch\Anaconda3\envs\test\lib\site-packages\nbclient\client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\TMillaKoch\Anaconda3\envs\test\lib\site-packages\nbclient\client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
#configuring the app
#useful resources include:
#https://github.com/Coding-with-Adam/Dash-by-Plotly/blob/master/Other/Dash_Introduction/intro.py
#https://dash-leaflet.herokuapp.com/
#https://github.com/plotly/jupyter-dash/blob/master/notebooks/getting_started.ipynb

app =JD(__name__)
cache = Cache()
cache.init_app(app.server, config={'CACHE_TYPE': 'SimpleCache'})
timeout = 20
#making dropdown option based on property in data table
id_list = []

#priority vs intermediate barrier list
#-------------------------------------------------------------------------------
#certain barriers in the priority list need to be looked at
#1100000243 does not show up in API call...no dam 
#1100000814 is a beaver dam
#1006800487 is a skid trail that has a low habitat value assessment
#1100001822 remanents of earthen dam wiyth very low habitat value due to lack of defined channel

prior_table = pd.read_csv('tables\priority_barriers.csv', index_col=False)
inter_table = pd.read_csv('tables\inter_barriers.csv', index_col=False)

#seperate GeoJSOn for selected filtering


# # features = gjson['features']
# def get_tabledata(features):
#     id_list = []
#     for i in range(len(features)):
#         pscis=features[i]['properties']['pscis_status']
#         barr=features[i]['properties']['barrier_status']
#         acc=features[i]['properties']['access_model_ch_co_sk']
#         all=features[i]['properties']['all_spawningrearing_per_barrier']
#         cross_id = str(features[i]['properties']['aggregated_crossings_id'])
#         lat = features[i]['geometry']['coordinates'][1]
#         lon = features[i]['geometry']['coordinates'][0]

#         temp = dict(id = cross_id, pscis_status=pscis, barrier_status=barr, access_model_ch_co_sk=acc, all_spawningrearing_per_barrier=all, lat = lat, lon = lon)

#         id_list = id_list + [temp,]
#     return id_list

# # geojson = dlx.dicts_to_geojson([{**c, **dict(tooltip=c['id'])} for c in id_list])
# # geobuf = dlx.geojson_to_geobuf(geojson)

# #marker cluster group 
# #----------------------------------------------------------------------------------------------------------------------------------

# def get_data(features):
#     accessible = []
#     other = []
#     for i in range(len(features)):
#         if features[i]['properties']['access_model_ch_co_sk'] == 'ACCESSIBLE':
#             accessible.append(
#                 dl.CircleMarker(
#                     color='white',
#                     fillColor = '#32cd32',
#                     fillOpacity = 1, 
#                     center = (features[i]['geometry']['coordinates'][1], features[i]['geometry']['coordinates'][0]), 
#                     children=[
#                         dl.Tooltip(str(features[i]['properties']['aggregated_crossings_id'])),
#                         dl.Popup(str(features[i]['properties']['aggregated_crossings_id'])),
#                     ],
#                 )
#             )
#         else:
#             other.append(
#                 dl.CircleMarker(
#                     color = 'white',
#                     fillColor = '#965ab3',
#                     fillOpacity = 1,
#                     center = (features[i]['geometry']['coordinates'][1], features[i]['geometry']['coordinates'][0]), 
#                     children=[
#                         dl.Tooltip(str(features[i]['properties']['aggregated_crossings_id'])),
#                         dl.Popup()
#                     ],
#                 )
#             )

#     cluster = dl.MarkerClusterGroup(id='markers', children=accessible)
#     other = dl.MarkerClusterGroup(id='markers1', children=other)
#     return cluster,other



 
    #-----------------------------------------------------------------------------------------------------------------------------------

# #point to layer 
# point_to_layer = assign("function(feature, latlng, context){return L.circleMarker(latlng);}")
# ------------------------------------------------------------------------------
prior_drop =  dcc.Dropdown(
                    options=[
                        {'label': 'Priority Barrier List', 'value': 'priority'},
                        {'label': 'Intermediate Barrier List', 'value': 'intermediate'}
                    ],
                    id='dd',
                    style={'width': '500px'}
                )

watershed_drop = dcc.Dropdown(
                    options=[
                        {'label': 'HORS', 'value': 'HORS'},
                        {'label': 'BULK', 'value': 'BULK'},
                        {'label': 'LNIC', 'value': 'LNIC'},
                        {'label': 'ELKR', 'value': 'ELKR'}
                    ],
                    value = 'HORS',
                    id='watershed',
                    style={'width': '500px'}
                )
# App layout
app.layout = html.Div([

    html.H1("Web Application Dashboard for Fish Passage BC", style={'text-align': 'left'}),

    

    dbc.Row([
        dbc.Col(prior_drop, width = 2),
        dbc.Col(watershed_drop, width = 2)
    ]),
    
    

    dl.Map(center=[52.6,-120.5], zoom=8, children=[
        
        
        dl.LayersControl(
        [dl.BaseLayer(dl.TileLayer(url='https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',
                    attribution='Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'), name='ESRI Topographic', checked=False),
                    dl.BaseLayer(dl.TileLayer(), name='Base', checked=True)] +
        [ dl.Overlay(children=[], checked=True, id='access', name='Accessible')]+
        [ dl.Overlay(children=[], checked=True, id='other', name='Other')] +
        [dl.Overlay(dl.GeoJSON(data=[], id='testM'))] +
        [dl.Overlay(dl.GeoJSON(data=[], id="streams", zoomToBounds=True), name='Streams',checked=True)])
        ]
        ,style={'width': '1500px', 'height': '500px'}, #style is key as map will not show up without it
        id='map'
    ),


    dash_table.DataTable(data=[],
                        style_data={
                            'color': 'white',
                            'backgroundColor': 'black'
                        },
                        style_table={'float':'left','width': '1000px'},
                        id='table2',
                        active_cell= None
                        ),
    
    html.H2('',id='test')

], style={'background-color': 'purple'})



# ------------------------------------------------------------------------------
# Connect Leaflet Map to Dash Components
@cache.memoize()

#api call function
def apiCall(w):
    request = 'https://features.hillcrestgeo.ca/bcfishpass/collections/bcfishpass.streams/items.json'
    query = '?properties=watershed_group_code,segmented_stream_id&filter=watershed_group_code%20=%20%27' + w + '%27' #this query slows things down for some reason

    request1 = 'https://features.hillcrestgeo.ca/bcfishpass/collections/bcfishpass.crossings/items.json'
    query1 = '?properties=aggregated_crossings_id,pscis_status,barrier_status,access_model_ch_co_sk,all_spawningrearing_per_barrier,all_spawningrearing_km&filter=watershed_group_code%20=%20%27' + w + '%27%20AND%20all_spawningrearing_km%3e0'

    response_API = requests.get(request+query)
    response_API1 = requests.get(request1+query1)

    parse = response_API.text
    parse1 = response_API1.text

    return parse, parse1

def get_data(features):
    accessible = []
    other = []
    for i in range(len(features)):
        if features[i]['properties']['access_model_ch_co_sk'] == 'ACCESSIBLE':
            accessible.append(
                dl.CircleMarker(
                    color='white',
                    fillColor = '#32cd32',
                    fillOpacity = 1, 
                    center = (features[i]['geometry']['coordinates'][1], features[i]['geometry']['coordinates'][0]), 
                    children=[
                        dl.Tooltip(str(features[i]['properties']['aggregated_crossings_id'])),
                        dl.Popup(str(features[i]['properties']['aggregated_crossings_id'])),
                    ],
                )
            )
        else:
            other.append(
                dl.CircleMarker(
                    color = 'white',
                    fillColor = '#965ab3',
                    fillOpacity = 1,
                    center = (features[i]['geometry']['coordinates'][1], features[i]['geometry']['coordinates'][0]), 
                    children=[
                        dl.Tooltip(str(features[i]['properties']['aggregated_crossings_id'])),
                        dl.Popup()
                    ],
                )
            )

    cluster = dl.MarkerClusterGroup(id='markers', children=accessible)
    other = dl.MarkerClusterGroup(id='markers1', children=other)
    return cluster,other

# features = gjson['features']
def get_tabledata(features):
    id_list = []
    for i in range(len(features)):
        pscis=features[i]['properties']['pscis_status']
        barr=features[i]['properties']['barrier_status']
        acc=features[i]['properties']['access_model_ch_co_sk']
        all=features[i]['properties']['all_spawningrearing_per_barrier']
        cross_id = str(features[i]['properties']['aggregated_crossings_id'])
        lat = features[i]['geometry']['coordinates'][1]
        lon = features[i]['geometry']['coordinates'][0]

        temp = dict(id = cross_id, pscis_status=pscis, barrier_status=barr, access_model_ch_co_sk=acc, all_spawningrearing_per_barrier=all, lat = lat, lon = lon)

        id_list = id_list + [temp,]
    return id_list



@app.callback(
    [Output('access', 'children'), Output('other', 'children'), Output('streams', 'data'), Output('table2','data')], [Input('watershed', 'value'), Input('dd', 'value')]
)
def update_map(value, priority):
    
    
    if value == 'BULK':
        parse, parse1 = apiCall('BULK')
        B_gjson = json.loads(parse1)
        B_stream = json.loads(parse)
        features = B_gjson['features']
        return get_data(features)[0], get_data(features)[1], B_stream, get_tabledata(features)
    elif value == 'LNIC':
        parse, parse1 = apiCall('LNIC')
        B_gjson = json.loads(parse1)
        B_stream = json.loads(parse)
        features = B_gjson['features']
        return get_data(features)[0], get_data(features)[1], B_stream, get_tabledata(features)
    elif value == 'ELKR':
        parse, parse1 = apiCall('ELKR')
        B_gjson = json.loads(parse1)
        B_stream = json.loads(parse)
        features = B_gjson['features']
        return get_data(features)[0], get_data(features)[1], B_stream, get_tabledata(features)
    elif value == 'HORS':
        parse, parse1 = apiCall('HORS')
        B_gjson = json.loads(parse1)
        B_stream = json.loads(parse)
        features = B_gjson['features']
        

        if priority == 'intermediate':
            data = []
            for i in range(0, len(inter_table.iloc[:,0])):
                id_list = get_tabledata(features)
                id_index = dict((p['id'],j) for j,p in enumerate(id_list))
                index1 = id_index.get(str(inter_table.iloc[:,0][i]), -1)
                data = data + [id_list[index1],]
            return get_data(features)[0], get_data(features)[1], B_stream, data
        elif priority == 'priority':
            data=[]
            for i in range(0, len(prior_table.iloc[:,0])):
                id_list = get_tabledata(features)
                id_index = dict((p['id'],j) for j,p in enumerate(id_list))
                index1 = id_index.get(str(prior_table.iloc[:,0][i]), -1)
                data = data + [id_list[index1],]
            return get_data(features)[0], get_data(features)[1], B_stream, data
        else:
           return get_data(features)[0], get_data(features)[1], B_stream, get_tabledata(features) 
        
    
    else: 
        return dash.no_update, dash.no_update, dash.no_update, dash.no_update

@app.callback(
    Output('test', 'children'), [Input('markers', 'children')]
)
def test(feature):
    print(feature[3])
# ------------------------------------------------------------------------------
if __name__ == '__main__':
    app.run_server(mode='inline', port = random.choice(range(2000, 10000)), host= "0.0.0.0")

------------------

[1;31m---------------------------------------------------------------------------[0m
[1;31mOSError[0m                                   Traceback (most recent call last)
[1;32m~\Anaconda3\envs\test\lib\site-packages\urllib3\connection.py[0m in [0;36m_new_conn[1;34m(self)[0m
[0;32m    174[0m             conn = connection.create_connection(
[1;32m--> 175[1;33m                 [1;33m([0m[0mself[0m[1;33m.[0m[0m_dns_host[0m[1;33m,[0m [0mself[0m[1;33m.[0m[0mport[0m[1;33m)[0m[1;33m,[0m [0mself[0m[1;33m.[0m[0mtimeout[0m[1;33m,[0m [1;33m**[0m[0mextra_kw[0m[1;33m[0m[0m
[0m[0;32m    176[0m             )

[1;32m~\Anaconda3\envs\test\lib\site-packages\urllib3\util\connection.py[0m in [0;36mcreate_connection[1;34m(address, timeout, source_address, socket_options)[0m
[0;32m     94[0m     [1;32mif[0m [0merr[0m [1;32mis[0m [1;32mnot[0m [1;32mNone[0m[1;33m:[0m[1;33m[0m[0m
[1;32m---> 95[1;33m         [1;32mraise[0m [0merr[0m[1;33m[0m[0m
[0m[0;32m     96[0m [1;33m[0m[0m

[1;32m~\Anaconda3\envs\test\lib\site-packages\urllib3\util\connection.py[0m in [0;36mcreate_connection[1;34m(address, timeout, source_address, socket_options)[0m
[0;32m     84[0m                 [0msock[0m[1;33m.[0m[0mbind[0m[1;33m([0m[0msource_address[0m[1;33m)[0m[1;33m[0m[0m
[1;32m---> 85[1;33m             [0msock[0m[1;33m.[0m[0mconnect[0m[1;33m([0m[0msa[0m[1;33m)[0m[1;33m[0m[0m
[0m[0;32m     86[0m             [1;32mreturn[0m [0msock[0m[1;33m[0m[0m

[1;31mOSError[0m: [WinError 10049] The requested address is not valid in its context

During handling of the above exception, another exception occurred:

[1;31mNewConnectionError[0m                        Traceback (most recent call last)
[1;32m~\Anaconda3\envs\test\lib\site-packages\urllib3\connectionpool.py[0m in [0;36murlopen[1;34m(self, method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos, **response_kw)[0m
[0;32m    709[0m                 [0mheaders[0m[1;33m=[0m[0mheaders[0m[1;33m,[0m[1;33m[0m[0m
[1;32m--> 710[1;33m                 [0mchunked[0m[1;33m=[0m[0mchunked[0m[1;33m,[0m[1;33m[0m[0m
[0m[0;32m    711[0m             )

[1;32m~\Anaconda3\envs\test\lib\site-packages\urllib3\connectionpool.py[0m in [0;36m_make_request[1;34m(self, conn, method, url, timeout, chunked, **httplib_request_kw)[0m
[0;32m    397[0m             [1;32melse[0m[1;33m:[0m[1;33m[0m[0m
[1;32m--> 398[1;33m                 [0mconn[0m[1;33m.[0m[0mrequest[0m[1;33m([0m[0mmethod[0m[1;33m,[0m [0murl[0m[1;33m,[0m [1;33m**[0m[0mhttplib_request_kw[0m[1;33m)[0m[1;33m[0m[0m
[0m[0;32m    399[0m [1;33m[0m[0m

[1;32m~\Anaconda3\envs\test\lib\site-packages\urllib3\connection.py[0m in [0;36mrequest[1;34m(self, method, url, body, headers)[0m
[0;32m    238[0m             [0mheaders[0m[1;33m[[0m[1;34m"User-Agent"[0m[1;33m][0m [1;33m=[0m [0m_get_default_user_agent[0m[1;33m([0m[1;33m)[0m[1;33m[0m[0m
[1;32m--> 239[1;33m         [0msuper[0m[1;33m([0m[0mHTTPConnection[0m[1;33m,[0m [0mself[0m[1;33m)[0m[1;33m.[0m[0mrequest[0m[1;33m([0m[0mmethod[0m[1;33m,[0m [0murl[0m[1;33m,[0m [0mbody[0m[1;33m=[0m[0mbody[0m[1;33m,[0m [0mheaders[0m[1;33m=[0m[0mheaders[0m[1;33m)[0m[1;33m[0m[0m
[0m[0;32m    240[0m [1;33m[0m[0m

[1;32m~\Anaconda3\envs\test\lib\http\client.py[0m in [0;36mrequest[1;34m(self, method, url, body, headers, encode_chunked)[0m
[0;32m   1228[0m         [1;34m"""Send a complete request to the server."""[0m[1;33m[0m[0m
[1;32m-> 1229[1;33m         [0mself[0m[1;33m.[0m[0m_send_request[0m[1;33m([0m[0mmethod[0m[1;33m,[0m [0murl[0m[1;33m,[0m [0mbody[0m[1;33m,[0m [0mheaders[0m[1;33m,[0m [0mencode_chunked[0m[1;33m)[0m[1;33m[0m[0m
[0m[0;32m   1230[0m [1;33m[0m[0m

[1;32m~\Anaconda3\envs\test\lib\http\client.py[0m in [0;36m_send_request[1;34m(self, method, url, body, headers, encode_chunked)[0m
[0;32m   1274[0m             [0mbody[0m [1;33m=[0m [0m_encode[0m[1;33m([0m[0mbody[0m[1;33m,[0m [1;34m'body'[0m[1;33m)[0m[1;33m[0m[0m
[1;32m-> 1275[1;33m         [0mself[0m[1;33m.[0m[0mendheaders[0m[1;33m([0m[0mbody[0m[1;33m,[0m [0mencode_chunked[0m[1;33m=[0m[0mencode_chunked[0m[1;33m)[0m[1;33m[0m[0m
[0m[0;32m   1276[0m [1;33m[0m[0m

[1;32m~\Anaconda3\envs\test\lib\http\client.py[0m in [0;36mendheaders[1;34m(self, message_body, encode_chunked)[0m
[0;32m   1223[0m             [1;32mraise[0m [0mCannotSendHeader[0m[1;33m([0m[1;33m)[0m[1;33m[0m[0m
[1;32m-> 1224[1;33m         [0mself[0m[1;33m.[0m[0m_send_output[0m[1;33m([0m[0mmessage_body[0m[1;33m,[0m [0mencode_chunked[0m[1;33m=[0m[0mencode_chunked[0m[1;33m)[0m[1;33m[0m[0m
[0m[0;32m   1225[0m [1;33m[0m[0m

[1;32m~\Anaconda3\envs\test\lib\http\client.py[0m in [0;36m_send_output[1;34m(self, message_body, encode_chunked)[0m
[0;32m   1015[0m         [1;32mdel[0m [0mself[0m[1;33m.[0m[0m_buffer[0m[1;33m[[0m[1;33m:[0m[1;33m][0m[1;33m[0m[0m
[1;32m-> 1016[1;33m         [0mself[0m[1;33m.[0m[0msend[0m[1;33m([0m[0mmsg[0m[1;33m)[0m[1;33m[0m[0m
[0m[0;32m   1017[0m [1;33m[0m[0m

[1;32m~\Anaconda3\envs\test\lib\http\client.py[0m in [0;36msend[1;34m(self, data)[0m
[0;32m    955[0m             [1;32mif[0m [0mself[0m[1;33m.[0m[0mauto_open[0m[1;33m:[0m[1;33m[0m[0m
[1;32m--> 956[1;33m                 [0mself[0m[1;33m.[0m[0mconnect[0m[1;33m([0m[1;33m)[0m[1;33m[0m[0m
[0m[0;32m    957[0m             [1;32melse[0m[1;33m:[0m[1;33m[0m[0m

[1;32m~\Anaconda3\envs\test\lib\site-packages\urllib3\connection.py[0m in [0;36mconnect[1;34m(self)[0m
[0;32m    204[0m     [1;32mdef[0m [0mconnect[0m[1;33m([0m[0mself[0m[1;33m)[0m[1;33m:[0m[1;33m[0m[0m
[1;32m--> 205[1;33m         [0mconn[0m [1;33m=[0m [0mself[0m[1;33m.[0m[0m_new_conn[0m[1;33m([0m[1;33m)[0m[1;33m[0m[0m
[0m[0;32m    206[0m         [0mself[0m[1;33m.[0m[0m_prepare_conn[0m[1;33m([0m[0mconn[0m[1;33m)[0m[1;33m[0m[0m

[1;32m~\Anaconda3\envs\test\lib\site-packages\urllib3\connection.py[0m in [0;36m_new_conn[1;34m(self)[0m
[0;32m    186[0m             raise NewConnectionError(
[1;32m--> 187[1;33m                 [0mself[0m[1;33m,[0m [1;34m"Failed to establish a new connection: %s"[0m [1;33m%[0m [0me[0m[1;33m[0m[0m
[0m[0;32m    188[0m             )

[1;31mNewConnectionError[0m: <urllib3.connection.HTTPConnection object at 0x00000134A95C84A8>: Failed to establish a new connection: [WinError 10049] The requested address is not valid in its context

During handling of the above exception, another exception occurred:

[1;31mMaxRetryError[0m                             Traceback (most recent call last)
[1;32m~\Anaconda3\envs\test\lib\site-packages\requests\adapters.py[0m in [0;36msend[1;34m(self, request, stream, timeout, verify, cert, proxies)[0m
[0;32m    498[0m                     [0mretries[0m[1;33m=[0m[0mself[0m[1;33m.[0m[0mmax_retries[0m[1;33m,[0m[1;33m[0m[0m
[1;32m--> 499[1;33m                     [0mtimeout[0m[1;33m=[0m[0mtimeout[0m[1;33m,[0m[1;33m[0m[0m
[0m[0;32m    500[0m                 )

[1;32m~\Anaconda3\envs\test\lib\site-packages\urllib3\connectionpool.py[0m in [0;36murlopen[1;34m(self, method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos, **response_kw)[0m
[0;32m    785[0m             retries = retries.increment(
[1;32m--> 786[1;33m                 [0mmethod[0m[1;33m,[0m [0murl[0m[1;33m,[0m [0merror[0m[1;33m=[0m[0me[0m[1;33m,[0m [0m_pool[0m[1;33m=[0m[0mself[0m[1;33m,[0m [0m_stacktrace[0m[1;33m=[0m[0msys[0m[1;33m.[0m[0mexc_info[0m[1;33m([0m[1;33m)[0m[1;33m[[0m[1;36m2[0m[1;33m][0m[1;33m[0m[0m
[0m[0;32m    787[0m             )

[1;32m~\Anaconda3\envs\test\lib\site-packages\urllib3\util\retry.py[0m in [0;36mincrement[1;34m(self, method, url, response, error, _pool, _stacktrace)[0m
[0;32m    591[0m         [1;32mif[0m [0mnew_retry[0m[1;33m.[0m[0mis_exhausted[0m[1;33m([0m[1;33m)[0m[1;33m:[0m[1;33m[0m[0m
[1;32m--> 592[1;33m             [1;32mraise[0m [0mMaxRetryError[0m[1;33m([0m[0m_pool[0m[1;33m,[0m [0murl[0m[1;33m,[0m [0merror[0m [1;32mor[0m [0mResponseError[0m[1;33m([0m[0mcause[0m[1;33m)[0m[1;33m)[0m[1;33m[0m[0m
[0m[0;32m    593[0m [1;33m[0m[0m

[1;31mMaxRetryError[0m: HTTPConnectionPool(host='0.0.0.0', port=9925): Max retries exceeded with url: /_alive_5929330b-f980-4313-9574-b62bfe07c72a (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x00000134A95C84A8>: Failed to establish a new connection: [WinError 10049] The requested address is not valid in its context'))

During handling of the above exception, another exception occurred:

[1;31mConnectionError[0m                           Traceback (most recent call last)
[1;32m~\AppData\Local\Temp\ipykernel_9044\2223735793.py[0m in [0;36m<module>[1;34m[0m
[0;32m    294[0m [1;31m# ------------------------------------------------------------------------------[0m[1;33m[0m[1;33m[0m[0m
[0;32m    295[0m [1;32mif[0m [0m__name__[0m [1;33m==[0m [1;34m'__main__'[0m[1;33m:[0m[1;33m[0m[0m
[1;32m--> 296[1;33m     [0mapp[0m[1;33m.[0m[0mrun_server[0m[1;33m([0m[0mmode[0m[1;33m=[0m[1;34m'inline'[0m[1;33m,[0m [0mport[0m [1;33m=[0m [0mrandom[0m[1;33m.[0m[0mchoice[0m[1;33m([0m[0mrange[0m[1;33m([0m[1;36m2000[0m[1;33m,[0m [1;36m10000[0m[1;33m)[0m[1;33m)[0m[1;33m,[0m [0mhost[0m[1;33m=[0m [1;34m"0.0.0.0"[0m[1;33m)[0m[1;33m[0m[0m
[0m
[1;32m~\Anaconda3\envs\test\lib\site-packages\jupyter_dash\jupyter_app.py[0m in [0;36mrun_server[1;34m(self, mode, width, height, inline_exceptions, **kwargs)[0m
[0;32m    337[0m                 )
[0;32m    338[0m [1;33m[0m[0m
[1;32m--> 339[1;33m         [0mwait_for_app[0m[1;33m([0m[1;33m)[0m[1;33m[0m[0m
[0m[0;32m    340[0m [1;33m[0m[0m
[0;32m    341[0m         [1;32mif[0m [0mJupyterDash[0m[1;33m.[0m[0m_in_colab[0m[1;33m:[0m[1;33m[0m[0m

[1;32m~\Anaconda3\envs\test\lib\site-packages\retrying.py[0m in [0;36mwrapped_f[1;34m(*args, **kw)[0m
[0;32m     47[0m             [1;33m@[0m[0msix[0m[1;33m.[0m[0mwraps[0m[1;33m([0m[0mf[0m[1;33m)[0m[1;33m[0m[0m
[0;32m     48[0m             [1;32mdef[0m [0mwrapped_f[0m[1;33m([0m[1;33m*[0m[0margs[0m[1;33m,[0m [1;33m**[0m[0mkw[0m[1;33m)[0m[1;33m:[0m[1;33m[0m[0m
[1;32m---> 49[1;33m                 [1;32mreturn[0m [0mRetrying[0m[1;33m([0m[1;33m*[0m[0mdargs[0m[1;33m,[0m [1;33m**[0m[0mdkw[0m[1;33m)[0m[1;33m.[0m[0mcall[0m[1;33m([0m[0mf[0m[1;33m,[0m [1;33m*[0m[0margs[0m[1;33m,[0m [1;33m**[0m[0mkw[0m[1;33m)[0m[1;33m[0m[0m
[0m[0;32m     50[0m [1;33m[0m[0m
[0;32m     51[0m             [1;32mreturn[0m [0mwrapped_f[0m[1;33m[0m[0m

[1;32m~\Anaconda3\envs\test\lib\site-packages\retrying.py[0m in [0;36mcall[1;34m(self, fn, *args, **kwargs)[0m
[0;32m    210[0m                 [1;32mif[0m [1;32mnot[0m [0mself[0m[1;33m.[0m[0m_wrap_exception[0m [1;32mand[0m [0mattempt[0m[1;33m.[0m[0mhas_exception[0m[1;33m:[0m[1;33m[0m[0m
[0;32m    211[0m                     [1;31m# get() on an attempt with an exception should cause it to be raised, but raise just in case[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 212[1;33m                     [1;32mraise[0m [0mattempt[0m[1;33m.[0m[0mget[0m[1;33m([0m[1;33m)[0m[1;33m[0m[0m
[0m[0;32m    213[0m                 [1;32melse[0m[1;33m:[0m[1;33m[0m[0m
[0;32m    214[0m                     [1;32mraise[0m [0mRetryError[0m[1;33m([0m[0mattempt[0m[1;33m)[0m[1;33m[0m[0m

[1;32m~\Anaconda3\envs\test\lib\site-packages\retrying.py[0m in [0;36mget[1;34m(self, wrap_exception)[0m
[0;32m    245[0m                 [1;32mraise[0m [0mRetryError[0m[1;33m([0m[0mself[0m[1;33m)[0m[1;33m[0m[0m
[0;32m    246[0m             [1;32melse[0m[1;33m:[0m[1;33m[0m[0m
[1;32m--> 247[1;33m                 [0msix[0m[1;33m.[0m[0mreraise[0m[1;33m([0m[0mself[0m[1;33m.[0m[0mvalue[0m[1;33m[[0m[1;36m0[0m[1;33m][0m[1;33m,[0m [0mself[0m[1;33m.[0m[0mvalue[0m[1;33m[[0m[1;36m1[0m[1;33m][0m[1;33m,[0m [0mself[0m[1;33m.[0m[0mvalue[0m[1;33m[[0m[1;36m2[0m[1;33m][0m[1;33m)[0m[1;33m[0m[0m
[0m[0;32m    248[0m         [1;32melse[0m[1;33m:[0m[1;33m[0m[0m
[0;32m    249[0m             [1;32mreturn[0m [0mself[0m[1;33m.[0m[0mvalue[0m[1;33m[0m[0m

[1;32m~\Anaconda3\envs\test\lib\site-packages\six.py[0m in [0;36mreraise[1;34m(tp, value, tb)[0m
[0;32m    717[0m             [1;32mif[0m [0mvalue[0m[1;33m.[0m[0m__traceback__[0m [1;32mis[0m [1;32mnot[0m [0mtb[0m[1;33m:[0m[1;33m[0m[0m
[0;32m    718[0m                 [1;32mraise[0m [0mvalue[0m[1;33m.[0m[0mwith_traceback[0m[1;33m([0m[0mtb[0m[1;33m)[0m[1;33m[0m[0m
[1;32m--> 719[1;33m             [1;32mraise[0m [0mvalue[0m[1;33m[0m[0m
[0m[0;32m    720[0m         [1;32mfinally[0m[1;33m:[0m[1;33m[0m[0m
[0;32m    721[0m             [0mvalue[0m [1;33m=[0m [1;32mNone[0m[1;33m[0m[0m

[1;32m~\Anaconda3\envs\test\lib\site-packages\retrying.py[0m in [0;36mcall[1;34m(self, fn, *args, **kwargs)[0m
[0;32m    198[0m         [1;32mwhile[0m [1;32mTrue[0m[1;33m:[0m[1;33m[0m[0m
[0;32m    199[0m             [1;32mtry[0m[1;33m:[0m[1;33m[0m[0m
[1;32m--> 200[1;33m                 [0mattempt[0m [1;33m=[0m [0mAttempt[0m[1;33m([0m[0mfn[0m[1;33m([0m[1;33m*[0m[0margs[0m[1;33m,[0m [1;33m**[0m[0mkwargs[0m[1;33m)[0m[1;33m,[0m [0mattempt_number[0m[1;33m,[0m [1;32mFalse[0m[1;33m)[0m[1;33m[0m[0m
[0m[0;32m    201[0m             [1;32mexcept[0m[1;33m:[0m[1;33m[0m[0m
[0;32m    202[0m                 [0mtb[0m [1;33m=[0m [0msys[0m[1;33m.[0m[0mexc_info[0m[1;33m([0m[1;33m)[0m[1;33m[0m[0m

[1;32m~\Anaconda3\envs\test\lib\site-packages\jupyter_dash\jupyter_app.py[0m in [0;36mwait_for_app[1;34m()[0m
[0;32m    325[0m         )
[0;32m    326[0m         [1;32mdef[0m [0mwait_for_app[0m[1;33m([0m[1;33m)[0m[1;33m:[0m[1;33m[0m[0m
[1;32m--> 327[1;33m             [0mres[0m [1;33m=[0m [0mrequests[0m[1;33m.[0m[0mget[0m[1;33m([0m[0malive_url[0m[1;33m)[0m[1;33m.[0m[0mcontent[0m[1;33m.[0m[0mdecode[0m[1;33m([0m[1;33m)[0m[1;33m[0m[0m
[0m[0;32m    328[0m             [1;32mif[0m [0mres[0m [1;33m!=[0m [1;34m"Alive"[0m[1;33m:[0m[1;33m[0m[0m
[0;32m    329[0m                 url = "http://{host}:{port}".format(

[1;32m~\Anaconda3\envs\test\lib\site-packages\requests\api.py[0m in [0;36mget[1;34m(url, params, **kwargs)[0m
[0;32m     71[0m     """
[0;32m     72[0m [1;33m[0m[0m
[1;32m---> 73[1;33m     [1;32mreturn[0m [0mrequest[0m[1;33m([0m[1;34m"get"[0m[1;33m,[0m [0murl[0m[1;33m,[0m [0mparams[0m[1;33m=[0m[0mparams[0m[1;33m,[0m [1;33m**[0m[0mkwargs[0m[1;33m)[0m[1;33m[0m[0m
[0m[0;32m     74[0m [1;33m[0m[0m
[0;32m     75[0m [1;33m[0m[0m

[1;32m~\Anaconda3\envs\test\lib\site-packages\requests\api.py[0m in [0;36mrequest[1;34m(method, url, **kwargs)[0m
[0;32m     57[0m     [1;31m# cases, and look like a memory leak in others.[0m[1;33m[0m[1;33m[0m[0m
[0;32m     58[0m     [1;32mwith[0m [0msessions[0m[1;33m.[0m[0mSession[0m[1;33m([0m[1;33m)[0m [1;32mas[0m [0msession[0m[1;33m:[0m[1;33m[0m[0m
[1;32m---> 59[1;33m         [1;32mreturn[0m [0msession[0m[1;33m.[0m[0mrequest[0m[1;33m([0m[0mmethod[0m[1;33m=[0m[0mmethod[0m[1;33m,[0m [0murl[0m[1;33m=[0m[0murl[0m[1;33m,[0m [1;33m**[0m[0mkwargs[0m[1;33m)[0m[1;33m[0m[0m
[0m[0;32m     60[0m [1;33m[0m[0m
[0;32m     61[0m [1;33m[0m[0m

[1;32m~\Anaconda3\envs\test\lib\site-packages\requests\sessions.py[0m in [0;36mrequest[1;34m(self, method, url, params, data, headers, cookies, files, auth, timeout, allow_redirects, proxies, hooks, stream, verify, cert, json)[0m
[0;32m    585[0m         }
[0;32m    586[0m         [0msend_kwargs[0m[1;33m.[0m[0mupdate[0m[1;33m([0m[0msettings[0m[1;33m)[0m[1;33m[0m[0m
[1;32m--> 587[1;33m         [0mresp[0m [1;33m=[0m [0mself[0m[1;33m.[0m[0msend[0m[1;33m([0m[0mprep[0m[1;33m,[0m [1;33m**[0m[0msend_kwargs[0m[1;33m)[0m[1;33m[0m[0m
[0m[0;32m    588[0m [1;33m[0m[0m
[0;32m    589[0m         [1;32mreturn[0m [0mresp[0m[1;33m[0m[0m

[1;32m~\Anaconda3\envs\test\lib\site-packages\requests\sessions.py[0m in [0;36msend[1;34m(self, request, **kwargs)[0m
[0;32m    699[0m [1;33m[0m[0m
[0;32m    700[0m         [1;31m# Send the request[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 701[1;33m         [0mr[0m [1;33m=[0m [0madapter[0m[1;33m.[0m[0msend[0m[1;33m([0m[0mrequest[0m[1;33m,[0m [1;33m**[0m[0mkwargs[0m[1;33m)[0m[1;33m[0m[0m
[0m[0;32m    702[0m [1;33m[0m[0m
[0;32m    703[0m         [1;31m# Total elapsed time of the request (approximately)[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\Anaconda3\envs\test\lib\site-packages\requests\adapters.py[0m in [0;36msend[1;34m(self, request, stream, timeout, verify, cert, proxies)[0m
[0;32m    563[0m                 [1;32mraise[0m [0mSSLError[0m[1;33m([0m[0me[0m[1;33m,[0m [0mrequest[0m[1;33m=[0m[0mrequest[0m[1;33m)[0m[1;33m[0m[0m
[0;32m    564[0m [1;33m[0m[0m
[1;32m--> 565[1;33m             [1;32mraise[0m [0mConnectionError[0m[1;33m([0m[0me[0m[1;33m,[0m [0mrequest[0m[1;33m=[0m[0mrequest[0m[1;33m)[0m[1;33m[0m[0m
[0m[0;32m    566[0m [1;33m[0m[0m
[0;32m    567[0m         [1;32mexcept[0m [0mClosedPoolError[0m [1;32mas[0m [0me[0m[1;33m:[0m[1;33m[0m[0m

[1;31mConnectionError[0m: HTTPConnectionPool(host='0.0.0.0', port=9925): Max retries exceeded with url: /_alive_5929330b-f980-4313-9574-b62bfe07c72a (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x00000134A95C84A8>: Failed to establish a new connection: [WinError 10049] The requested address is not valid in its context'))
ConnectionError: HTTPConnectionPool(host='0.0.0.0', port=9925): Max retries exceeded with url: /_alive_5929330b-f980-4313-9574-b62bfe07c72a (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x00000134A95C84A8>: Failed to establish a new connection: [WinError 10049] The requested address is not valid in its context'))

