Traceback (most recent call last):
  File "C:\Users\Tomas\anaconda3.1\envs\test\lib\site-packages\jupyter_cache\executors\utils.py", line 56, in single_nb_execution
    record_timing=False,
  File "C:\Users\Tomas\anaconda3.1\envs\test\lib\site-packages\nbclient\client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\Users\Tomas\anaconda3.1\envs\test\lib\site-packages\nbclient\util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "C:\Users\Tomas\anaconda3.1\envs\test\lib\site-packages\nbclient\util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "C:\Users\Tomas\anaconda3.1\envs\test\lib\asyncio\base_events.py", line 587, in run_until_complete
    return future.result()
  File "C:\Users\Tomas\anaconda3.1\envs\test\lib\site-packages\nbclient\client.py", line 664, in async_execute
    cell, index, execution_count=self.code_cells_executed + 1
  File "C:\Users\Tomas\anaconda3.1\envs\test\lib\site-packages\nbclient\client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\Tomas\anaconda3.1\envs\test\lib\site-packages\nbclient\client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
#configuring the app
#useful resources include:
#https://github.com/Coding-with-Adam/Dash-by-Plotly/blob/master/Other/Dash_Introduction/intro.py
#https://dash-leaflet.herokuapp.com/
#https://github.com/plotly/jupyter-dash/blob/master/notebooks/getting_started.ipynb

app = Dash(__name__)

#making dropdown option based on property in data table
id_list = []

features = gjson['features']
for i in range(len(features)):
    lati=features[i]['geometry']['coordinates'][1]
    long=features[i]['geometry']['coordinates'][0]
    cross_id = str(features[i]['id'])

    temp = dict(name = cross_id, lat = lati, lon = long)

    id_list = id_list + [temp,]

dd_options = [dict(value=j['name'], label=j['name']) for j in id_list]
dd_defaults = [o['value'] for o in dd_options]

# print(dd_defaults)
# print(type(dd_defaults[2]))

# # Generate geojson with a marker for each city and name as tooltip.
geojson = dlx.dicts_to_geojson([{**c, **dict(tooltip=c['name'])} for c in id_list])

gjson_filter = assign("function(feature, context){return context.props.hideout.includes(feature.name);}")



# ------------------------------------------------------------------------------
# App layout
app.layout = html.Div([

    html.H1("Web Application Dashboard for Fish Passage BC", style={'text-align': 'center'}),

    dcc.Dropdown(id="dd",
                 options=dd_options,
                 value=dd_defaults,
                 multi=True,
                 style={'width': "40%"}
                 ),
    
    #Map ...use geobuf for faster option in cumputing
    dl.Map(center=[52.6,-120.5], zoom=8, children=[
        dl.TileLayer(),
        dl.GeoJSON(data=stream, id="streams"),
        dl.GeoJSON(data=geojson, options=dict(filter=geojson_filter), hideout=dd_defaults, id="geojson", zoomToBounds=True)
        ]
        ,style={'width': '800px', 'height': '500px'} #style is key as map will not show up without it

    ),

    #html.Div(id='stream'),

    #html.H3(id='cross')

    #html.Div(id='output_container', children=[]),
    #html.Br(),

    #dcc.Graph(id='my_bee_map', figure={}) #add a graph if need be

])

# ------------------------------------------------------------------------------
# Connect Leaflet Map to Dash Components
@app.callback(
   Output('stream', 'children'), [Input('streams', 'click_feature')]
)
def stream_click(feature):
    if feature is not None:
        return f"The stream is {feature['properties']['segmented_stream_id']}"

@app.callback(
    Output('geojson', 'hideout'), [Input('dd', 'value')]
)
def cross_click(feature):
    return feature

#app.clientside_callback("function(x){return x;}", Output("crossings", "hideout"), Input("TableValue", "value"))

# ------------------------------------------------------------------------------
if __name__ == '__main__':
    app.run_server()
------------------

[1;31m---------------------------------------------------------------------------[0m
[1;31mNameError[0m                                 Traceback (most recent call last)
[1;32m~\AppData\Local\Temp\ipykernel_11356\649193150.py[0m in [0;36m<module>[1;34m[0m
[0;32m     50[0m         [0mdl[0m[1;33m.[0m[0mTileLayer[0m[1;33m([0m[1;33m)[0m[1;33m,[0m[1;33m[0m[1;33m[0m[0m
[0;32m     51[0m         [0mdl[0m[1;33m.[0m[0mGeoJSON[0m[1;33m([0m[0mdata[0m[1;33m=[0m[0mstream[0m[1;33m,[0m [0mid[0m[1;33m=[0m[1;34m"streams"[0m[1;33m)[0m[1;33m,[0m[1;33m[0m[1;33m[0m[0m
[1;32m---> 52[1;33m         [0mdl[0m[1;33m.[0m[0mGeoJSON[0m[1;33m([0m[0mdata[0m[1;33m=[0m[0mgeojson[0m[1;33m,[0m [0moptions[0m[1;33m=[0m[0mdict[0m[1;33m([0m[0mfilter[0m[1;33m=[0m[0mgeojson_filter[0m[1;33m)[0m[1;33m,[0m [0mhideout[0m[1;33m=[0m[0mdd_defaults[0m[1;33m,[0m [0mid[0m[1;33m=[0m[1;34m"geojson"[0m[1;33m,[0m [0mzoomToBounds[0m[1;33m=[0m[1;32mTrue[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m     53[0m         ]
[0;32m     54[0m         [1;33m,[0m[0mstyle[0m[1;33m=[0m[1;33m{[0m[1;34m'width'[0m[1;33m:[0m [1;34m'800px'[0m[1;33m,[0m [1;34m'height'[0m[1;33m:[0m [1;34m'500px'[0m[1;33m}[0m [1;31m#style is key as map will not show up without it[0m[1;33m[0m[1;33m[0m[0m

[1;31mNameError[0m: name 'geojson_filter' is not defined
NameError: name 'geojson_filter' is not defined

